// This file generated for packaging, do not edit.
// To edit, see original source:
// /home/runner/work/farm-ng-amiga/farm-ng-amiga/protos/farm_ng/canbus/canbus.proto.
//
// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package farm_ng.canbus.proto;

service CanbusService {
  // Streams raw messages received on the CAN bus
  rpc streamCanbusMessages(StreamCanbusRequest)
      returns (stream StreamCanbusReply) {}
  // Sends messages on the CAN bus
  rpc sendCanbusMessage(stream SendCanbusMessageRequest)
      returns (stream SendCanbusMessageReply) {}

  // Streams the states of all detected motors.
  // Motors not actively streaming their state will not appear in the StreamMotorStatesReply
  rpc streamMotorStates(StreamMotorStatesRequest)
      returns (stream StreamMotorStatesReply) {}

  // Streams vehicle twist states received on the CAN bus
  rpc streamVehicleTwistState(StreamVehicleTwistStateRequest)
    returns (stream StreamVehicleTwistStateReply) {}

  // Sends twist vehicle commands on the CAN bus
  // and responds with the most recent received twist state.
  rpc sendVehicleTwistCommand(stream SendVehicleTwistCommandRequest)
    returns (stream SendVehicleTwistCommandReply) {}
}

message StreamCanbusRequest {
}

message StreamCanbusReply {
  RawCanbusMessages messages = 1;
}

message SendCanbusMessageRequest {
  RawCanbusMessage message = 1;
}

message SendCanbusMessageReply {
  bool success = 1;
}

// Message to send a twist command to the vehicle
message Twist2d {
  // The commanded linear velocity of the vehicle in the x direction in meters per second
  float linear_velocity_x = 1;
  float linear_velocity_y = 2;

  // The commanded angular velocity of the vehicle in radians per second
  float angular_velocity = 3;
}

// Message to send a twist command to the vehicle
  message StreamVehicleTwistStateRequest {
}

// Message to send a twist command to the vehicle
message StreamVehicleTwistStateReply {
  // The time the message is "received" / "sent" on the canbus
  double stamp = 1;
  // The state of the vehicle
  Twist2d state = 2;
}

// Message to send a twist command to the vehicle
message SendVehicleTwistCommandRequest {
  // The commanded twist to the vehicle
  Twist2d command = 1;
}

// Message to send a twist command to the vehicle
message SendVehicleTwistCommandReply {
  // Whether the command was successfully sent
  bool success = 1;
  // The time the message is "received" / "sent" on the canbus
  double stamp = 2;
  // The state of the vehicle
  Twist2d state = 3;
}

message RawCanbusMessage {
  // The time the message is "received" / "sent" on the canbus
  // in the steady_clock/time.montonic() time domain
  double stamp = 1;
  uint32 id = 2; // CAN node ID of the message
  bool error = 3;
  bool remote_transmission = 4;
  bytes data = 5; // Encoded payload of the CAN packet
}

message RawCanbusMessages {
  repeated RawCanbusMessage messages = 1;
}

message StreamMotorStatesRequest {
}

// Proto definition containing state values of a motor
// Corresponds to MotorState class
message MotorState {
    double stamp = 1; // stamp of the RawCanbusMessage containing the motor state values
    uint32 id = 2; // CAN node ID of the motor
    uint32 status = 3; // Corresponds to MotorControllerStatus enum
    int32 rpm = 4; // Non-geared motor rpm. Values are inverted (negative) for flipped motors.
    double voltage = 5; // Battery voltage, as measured at motor controller
    double current = 6; // Motor current draw, as measured at motor controller
    int32 temperature = 7; // Motor temperature
}

// Packages multiple MotorState's for the client
message StreamMotorStatesReply {
  // List of MotorState's
  repeated MotorState motors = 1;
}
