# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from farm_ng.canbus import canbus_pb2 as farm__ng_dot_canbus_dot_canbus__pb2


class CanbusServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.streamCanbusMessages = channel.unary_stream(
                '/farm_ng.canbus.proto.CanbusService/streamCanbusMessages',
                request_serializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamCanbusRequest.SerializeToString,
                response_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamCanbusReply.FromString,
                )
        self.sendCanbusMessage = channel.stream_stream(
                '/farm_ng.canbus.proto.CanbusService/sendCanbusMessage',
                request_serializer=farm__ng_dot_canbus_dot_canbus__pb2.SendCanbusMessageRequest.SerializeToString,
                response_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.SendCanbusMessageReply.FromString,
                )
        self.streamMotorStates = channel.unary_stream(
                '/farm_ng.canbus.proto.CanbusService/streamMotorStates',
                request_serializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamMotorStatesRequest.SerializeToString,
                response_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamMotorStatesReply.FromString,
                )
        self.streamVehicleTwistState = channel.unary_stream(
                '/farm_ng.canbus.proto.CanbusService/streamVehicleTwistState',
                request_serializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamVehicleTwistStateRequest.SerializeToString,
                response_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamVehicleTwistStateReply.FromString,
                )
        self.sendVehicleTwistCommand = channel.stream_stream(
                '/farm_ng.canbus.proto.CanbusService/sendVehicleTwistCommand',
                request_serializer=farm__ng_dot_canbus_dot_canbus__pb2.SendVehicleTwistCommandRequest.SerializeToString,
                response_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.SendVehicleTwistCommandReply.FromString,
                )


class CanbusServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def streamCanbusMessages(self, request, context):
        """Streams raw messages received on the CAN bus
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendCanbusMessage(self, request_iterator, context):
        """Sends messages on the CAN bus
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamMotorStates(self, request, context):
        """Streams the states of all detected motors.
        Motors not actively streaming their state will not appear in the StreamMotorStatesReply
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamVehicleTwistState(self, request, context):
        """Streams vehicle twist states received on the CAN bus
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendVehicleTwistCommand(self, request_iterator, context):
        """Sends twist vehicle commands on the CAN bus
        and responds with the most recent received twist state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CanbusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'streamCanbusMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.streamCanbusMessages,
                    request_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamCanbusRequest.FromString,
                    response_serializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamCanbusReply.SerializeToString,
            ),
            'sendCanbusMessage': grpc.stream_stream_rpc_method_handler(
                    servicer.sendCanbusMessage,
                    request_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.SendCanbusMessageRequest.FromString,
                    response_serializer=farm__ng_dot_canbus_dot_canbus__pb2.SendCanbusMessageReply.SerializeToString,
            ),
            'streamMotorStates': grpc.unary_stream_rpc_method_handler(
                    servicer.streamMotorStates,
                    request_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamMotorStatesRequest.FromString,
                    response_serializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamMotorStatesReply.SerializeToString,
            ),
            'streamVehicleTwistState': grpc.unary_stream_rpc_method_handler(
                    servicer.streamVehicleTwistState,
                    request_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamVehicleTwistStateRequest.FromString,
                    response_serializer=farm__ng_dot_canbus_dot_canbus__pb2.StreamVehicleTwistStateReply.SerializeToString,
            ),
            'sendVehicleTwistCommand': grpc.stream_stream_rpc_method_handler(
                    servicer.sendVehicleTwistCommand,
                    request_deserializer=farm__ng_dot_canbus_dot_canbus__pb2.SendVehicleTwistCommandRequest.FromString,
                    response_serializer=farm__ng_dot_canbus_dot_canbus__pb2.SendVehicleTwistCommandReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'farm_ng.canbus.proto.CanbusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CanbusService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def streamCanbusMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/farm_ng.canbus.proto.CanbusService/streamCanbusMessages',
            farm__ng_dot_canbus_dot_canbus__pb2.StreamCanbusRequest.SerializeToString,
            farm__ng_dot_canbus_dot_canbus__pb2.StreamCanbusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendCanbusMessage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/farm_ng.canbus.proto.CanbusService/sendCanbusMessage',
            farm__ng_dot_canbus_dot_canbus__pb2.SendCanbusMessageRequest.SerializeToString,
            farm__ng_dot_canbus_dot_canbus__pb2.SendCanbusMessageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamMotorStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/farm_ng.canbus.proto.CanbusService/streamMotorStates',
            farm__ng_dot_canbus_dot_canbus__pb2.StreamMotorStatesRequest.SerializeToString,
            farm__ng_dot_canbus_dot_canbus__pb2.StreamMotorStatesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamVehicleTwistState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/farm_ng.canbus.proto.CanbusService/streamVehicleTwistState',
            farm__ng_dot_canbus_dot_canbus__pb2.StreamVehicleTwistStateRequest.SerializeToString,
            farm__ng_dot_canbus_dot_canbus__pb2.StreamVehicleTwistStateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendVehicleTwistCommand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/farm_ng.canbus.proto.CanbusService/sendVehicleTwistCommand',
            farm__ng_dot_canbus_dot_canbus__pb2.SendVehicleTwistCommandRequest.SerializeToString,
            farm__ng_dot_canbus_dot_canbus__pb2.SendVehicleTwistCommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
